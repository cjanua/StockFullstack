#!/usr/bin/env bash
# ./dtf

export SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Install dependencies (as needed)
$SCRIPT_DIR/scripts/install.sh

# Ensure all shell scripts are executable
for dir in "$SCRIPT_DIR" "$SCRIPT_DIR/dashboard" "$SCRIPT_DIR/backend/alpaca"; do
    if [ -d "$dir" ]; then
        find "$dir" -maxdepth 1 -type f -name "*.sh" ! -executable -exec chmod +x {} \;
    fi
done

# Detect if .env file exists, if not create it from template
if [ ! -f .env ]; then
    if [ -f .env.example ]; then
        echo "Creating .env file from .env.example"
        cp .env.example .env
        echo "Please update your .env file with your credentials"
    else
        echo "Creating empty .env file"
        touch .env
        echo "Please add your credentials to the .env file"
    fi
fi

# Function to print usage instructions
print_usage() {
    echo "Usage: dtf [command]"
    echo "Commands:"
    echo "  compose up/down --dev                            # uses default ENV"
    echo "  start/stop/restart [service]                          # if no service provided, passthrough to docker compose commands"
    echo "  build [service]                                                 # if no service provided build the whole docker-compose"
    echo "  logs   [service]                                                 # View logs of all (no service provided) or a specific service"
    echo "  shell [service]                                                  # must provide a service"
    echo "  test [config|pipeline|training]                          # Run AI tests inside ai-training container (all if none specified)"
    echo "  demo                                                            # Run quick AI pipeline demo"
    echo "  benchmark                                                       # Run benchmark suite (3 demo runs)"
    echo "  perf                                                            # Run performance benchmark with commit tracking"
    echo "  comprehensive                                                   # Run comprehensive training & backtesting with reports"
    echo
    echo "Options:"
    echo "  --dev                                            # Use development configuration"
    echo "  --no-cache                                       # Force clean build ignoring cache"
    echo
    echo "Available services: portfolio-service, dashboard, redis, ai-training"
}

# Check if Docker is installed
if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
    echo "Docker is not installed. Please install Docker first."
    exit 1
fi

# Load environment if scripts/utils.sh exists
if [ -f "$SCRIPT_DIR/scripts/utils.sh" ]; then
    source "$SCRIPT_DIR/scripts/utils.sh"
    export_dotenv
fi


source "$SCRIPT_DIR/scripts/watcher.sh"

# Basic arg parsing to support optional flags
ARGS=()
NO_CACHE=false
for arg in "$@"; do
    case "$arg" in
        --dev)
            DEV_MODE="true"
            ;;
        --no-cache)
            NO_CACHE=true
            ;;
        *)
            ARGS+=("$arg")
            ;;
    esac
done
set -- "${ARGS[@]}"

# Parse command line arguments
if [ $# -eq 0 ]; then
        print_usage
        exit 0
fi

# Define compose command base
COMPOSE_BASE="docker compose -f docker-compose.yaml"
if [ "$ENV" = "DEV" ]; then
    COMPOSE_BASE="$COMPOSE_BASE -f docker-compose.dev.yaml"
fi

start_all() {
    echo "Starting all services..."
    if [ "$ENV" = "DEV" ]; then
        echo "Dev mode enabled (hot reload)"
        $COMPOSE_BASE up -d
    else
        $COMPOSE_BASE up --build -d
    fi
}

start_service() {
    local service=$1
    echo "Starting $service service..."
    $COMPOSE_BASE up -d "$service"
}

stop_all() {
    echo "Stopping all services..."
    $COMPOSE_BASE down
}

stop_service() {
    local service=$1
    echo "Stopping $service service..."
    $COMPOSE_BASE down "$service"
}

build_service() {
    local service=$1
    echo "Building $service service..."
    if [ "$NO_CACHE" = true ]; then
        echo "Using --no-cache flag to force clean build"
        $COMPOSE_BASE build --no-cache "$service"
    else
        $COMPOSE_BASE build "$service"
    fi
}

build_all() {
    echo "Building all services..."
    if [ "$NO_CACHE" = true ]; then
        echo "Using --no-cache flag to force clean build"
        $COMPOSE_BASE build --no-cache
        NO_CACHE=false
    else
        $COMPOSE_BASE build
    fi
}

restart_service() {
    local service=$1
    echo "Restarting $service service..."
    build_service "$service"
    $COMPOSE_BASE restart "$service"
}

case "$1" in
    '')
        start_all
        exit 0
        ;;
    compose)
        shift
        if [ "$1" = "up" ]; then
            start_all
        elif [ "$1" = "down" ]; then
            stop_all
        else
            echo "Invalid compose command. Use up or down."
            print_usage
            exit 1
        fi
        ;;
    start)
        if [ -z "$2" ]; then
            start_all
        else
            start_service "$2"
        fi
        ;;
    stop)
        if [ -z "$2" ]; then
            stop_all
        else
            stop_service "$2"
        fi
        ;;
    restart)
        if [ -z "$2" ]; then
            echo "Restarting all services..."
            stop_all
            build_all
            start_all
        else
            build_service "$2"
            restart_service "$2"
        fi
        ;;
    build)
        if [ -z "$2" ]; then
            echo "Building all Docker images..."
            build_all
        else
            echo "Building $2 service..."
            build_service "$2"
        fi
        ;;
    logs)
        if [ -z "$2" ]; then
            echo "Showing logs for all services..."
            $COMPOSE_BASE logs -f
        else
            echo "Showing logs for $2..."
            $COMPOSE_BASE logs -f "$2"
        fi
        ;;
    shell)
        if [ -z "$2" ]; then
            echo "Please specify a service name"
            echo "Available services: portfolio-service, dashboard, redis, ai-training"
            exit 1
        else
            echo "Opening shell in $2..."
            $COMPOSE_BASE exec "$2" /bin/bash || $COMPOSE_BASE exec "$2" /bin/sh
        fi
        ;;
    watcher)
        watcher "$2"
        exit 0
        ;;
    ai-training)
        scripts/train_ai.sh "${@:2}"
        exit 0
        ;;
    test)  # NEW: Run AI tests inside the ai-training container
        CONTAINER_NAME="ai-training-stockfullstack"
        echo "Running AI tests in $CONTAINER_NAME..."
        if ! docker ps | grep -q "$CONTAINER_NAME"; then
            echo "Starting ai-training service..."
            $COMPOSE_BASE up -d ai-training
        fi
        if [ -z "$2" ]; then
            # Run all tests from the project root to ensure proper import paths
            docker exec -it "$CONTAINER_NAME" python -m ai.tests.test_config
            docker exec -it "$CONTAINER_NAME" python -m ai.tests.test_pipeline
            docker exec -it "$CONTAINER_NAME" python -m ai.tests.test_training
        else
            # Run specific test from project root
            case "$2" in
                config)
                    docker exec -it "$CONTAINER_NAME" python -m ai.tests.test_config
                    ;;
                pipeline)
                    docker exec -it "$CONTAINER_NAME" python -m ai.tests.test_pipeline
                    ;;
                training)
                    docker exec -it "$CONTAINER_NAME" python -m ai.tests.test_training
                    ;;
                *)
                    echo "Invalid test name. Use: config, pipeline, or training."
                    print_usage
                    exit 1
                    ;;
            esac
        fi
        ;;
    demo)
        CONTAINER_NAME="ai-training-stockfullstack"
        echo "Running AI demo..."
        if ! docker ps | grep -q "$CONTAINER_NAME"; then
            echo "Starting ai-training service..."
            $COMPOSE_BASE up -d ai-training
        fi
        
        docker exec $CONTAINER_NAME python /workspace/ai/demo_runner.py
        ;;
    benchmark)
        CONTAINER_NAME="ai-training-stockfullstack"  
        echo "Running AI benchmark suite..."
        if ! docker ps | grep -q "$CONTAINER_NAME"; then
            echo "Starting ai-training service..."
            $COMPOSE_BASE up -d ai-training
        fi
        
        echo "Running 3 demo iterations for benchmarking..."
        for i in {1..3}; do
            echo "ðŸ”„ Benchmark run $i/3"
            ./dtf demo
        done
        ;;
    perf)
        CONTAINER_NAME="ai-training-stockfullstack"  
        echo "Running performance benchmark..."
        if ! docker ps | grep -q "$CONTAINER_NAME"; then
            echo "Starting ai-training service..."
            $COMPOSE_BASE up -d ai-training
        fi
        
        docker exec $CONTAINER_NAME python /workspace/ai/performance_benchmark.py
        ;;
    comprehensive)
        CONTAINER_NAME="ai-training-stockfullstack"  
        echo "Running comprehensive training & backtesting..."
        if ! docker ps | grep -q "$CONTAINER_NAME"; then
            echo "Starting ai-training service..."
            $COMPOSE_BASE up -d ai-training
        fi
        
        docker exec $CONTAINER_NAME python /workspace/ai/main.py
        ;;
    *)
        print_usage
        exit 1
        ;;
esac