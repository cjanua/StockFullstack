#!/bin/bash
#.envrc

export PROJECT_ROOT=$PWD

# Create and set up bin directory
mkdir -p "$PROJECT_ROOT/bin"

# Create wrapper scripts
echo '#!/bin/bash
'"$PROJECT_ROOT"'/run.sh "$@"' > "$PROJECT_ROOT/bin/run"
echo '#!/bin/bash
'"$PROJECT_ROOT"'/run.sh "$@"' > "$PROJECT_ROOT/bin/run.sh"

# Make all scripts executable
chmod +x "$PROJECT_ROOT/bin/run"
chmod +x "$PROJECT_ROOT/bin/run.sh"
chmod +x "$PROJECT_ROOT/run.sh"
chmod +x "$PROJECT_ROOT/scripts/arch/system_software.sh"
chmod +x "$PROJECT_ROOT/scripts/arch/archreq.sh"

# Add paths
PATH_add "$PROJECT_ROOT/bin"
PATH_add "$PROJECT_ROOT"

# System Requirements
./scripts/arch/system_software.sh

# BACKEND
if [ -d "venv" ]; then
    export VIRTUAL_ENV="$PWD/venv"
    PATH_add "$VIRTUAL_ENV/bin"
    chmod +x "$PROJECT_ROOT/venv/bin/activate"
    source ./venv/bin/activate
else
    python -m venv venv
fi

export PODMAN_IGNORE_CGROUPSV1_WARNING=true

# Optional: Export project-specific environment variables
export PYTHONPATH="$PWD:$PYTHONPATH"

# Optional: Set development-specific variables
export FLASK_ENV=development
export DEBUG=1


# Frontend


# Add bin to PATH
PATH_add "$PWD/bin"

chmod +x "$PROJECT_ROOT/backend/alpaca/apca.py"
PATH_add "$PROJECT_ROOT/backend/alpaca/apca.py"

# Optional: Add local bin directory to PATH if it exists
if [ -d "$PWD/bin" ]; then
    PATH_add "$PWD/bin"
fi
set -a
source .env
source ./scripts/arch/archreq.sh
set +a