#!/usr/bin/env bash
# .envrc

export PROJECT_PATH="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
export DASHBOARD_PATH="$PROJECT_PATH/dashboard"

# Detect the operating system
OS=$(uname -s)
case "$OS" in
    Linux)
        if [ -f /etc/arch-release ]; then
            ./scripts/arch/install_deps.sh
            OS_NAME="arch"
        elif [ -f /etc/lsb-release ] || [ -f /etc/os-release ] && grep -qi ubuntu /etc/os-release; then
            ./scripts/ubuntu/install_deps.sh
            OS_NAME="ubuntu"
        else
            echo "Unsupported Linux distribution"
            exit 1
        fi
        ;;
    *)
        echo "Unsupported OS: $OS"
        exit 1
        ;;
esac

export HSA_OVERRIDE_GFX_VERSION=11.0.0
export LD_LIBRARY_PATH="/opt/rocm/lib:/opt/rocm/lib64:/usr/lib:$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="/usr/lib/pkgconfig"
export UV_PROJECT_ENVIRONMENT="$PROJECT_PATH/.venv-$OS_NAME"

# Source environment variables if .env exists
if [ -f "$PROJECT_PATH/.env" ]; then
    source "$PROJECT_PATH/.env"
fi

# Set direnv link mode to copy for NTFS/exFAT compatibility
export DIRENV_LINK_MODE=copy

# Unset conflicting VIRTUAL_ENV to avoid mismatches
unset VIRTUAL_ENV

if ! (command -v python3.12 | grep -i ".pyenv") >> /dev/null; then
    pyenv install 3.12.7
fi

export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"

pyenv local 3.12.7 >> /dev/null


export PYTHON="$HOME/.pyenv/versions/3.12.7/bin/python3.12"


# Create virtual environment if it doesn't exist
uv venv --allow-existing "$UV_PROJECT_ENVIRONMENT" --python "$PYTHON" 
source "$UV_PROJECT_ENVIRONMENT/bin/activate"

# Sync dependencies with uv
uv sync --python "$PYTHON"